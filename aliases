# Enable aliases to be sudo’ed
alias sudo='sudo '

alias i='brew cask install $1'

# Open dir in SourceTree
alias st="open . -a 'SourceTree'"

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# Flush Directory Service cache
alias flushdns="dscacheutil -flushcache && killall -HUP mDNSResponder"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# Enable/Disable Spotlight
alias spotoff="sudo mdutil -a -i off"
alias spoton="sudo mdutil -a -i on"

# Kill all the tabs in Chrome to free up memory
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

# Lock the screen (when going AFK)
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

# Speedtest
alias speedtest="wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test100.zip"

# Hosts
alias hosts="sudo vi /etc/hosts"

# Random.org
alias password="curl -s 'https://www.random.org/strings/?num=1&len=20&digits=on&upperalpha=on&loweralpha=on&unique=on&format=plain&rnd=new' | pbcopy"

# Chrome
app() {
    echo "$1"
    /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --app=$1
}

# Quick watching
alias w="watch -n 0.5 "

wu() {
	if [ -z "$2" ]; then
		watch --color --no-title "tput setaf 2; echo 'HTTP status:'; tput setaf 7; curl -sLI $1; tput setaf 2; echo 'TOP status:'; tput setaf 7; ssh root@$1 'top -b -n 1 | head'"
	else
    	watch --color --no-title "tput setaf 2; echo 'HTTP status:'; tput setaf 7; curl -sLI $1; tput setaf 2; echo 'TOP status:'; tput setaf 7; ssh root@$1 'top -b -n 1 | head'; tput setaf 2; echo '\nExtra (${@:2}):'; tput setaf 7; ssh root@$1 '${@:2}'"
	fi
}

# Changing directories
alias ls="exa -hlg --git $1"
alias tree="exa -hlgT --git $1"
alias f="fuck"

alias flip='echo "(╯°□°）╯︵ ┻━┻" | tr -d "\n" | pbcopy && echo "copied (╯°□°）╯︵ ┻━┻"'
alias unflip='echo "┬─┬ノ(°- °ノ)" | tr -d "\n" | pbcopy && echo "copied ┬─┬ノ(°- °ノ)"''"))"'
alias ouchflip='echo "ﾐ┻┻(ﾉ>｡<)ﾉ" | tr -d "\n" | pbcopy && echo "copied ﾐ┻┻(ﾉ>｡<)ﾉ"''"))"'

# Quickly run an iterm2 project file
project() {
    osascript .iterm2
}

# Colorful manpages
man() {
    env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}

alias sa='source ~/.aliases'

# 
# FZF implementations
# 

export FZF_DEFAULT_OPTS='--reverse'

PROJECT_DIRECTORIES=(
    "$HOME/"
    "$HOME/Projects"
    "$HOME/Lifely"
    "$HOME/Lifely/Projects"
)

DIR_ACTIONS="Change working directory (cd):cd <DIR>
Source Tree:open <DIR> -a 'SourceTree'
Visual Studio Code:open <DIR> -a 'Visual Studio Code'
$EDITOR:$EDITOR <DIR>"

FILE_ACTIONS="Open:open <FILE>
View (inline):cat <FILE>
Copy:cat <FILE> | pbcopy
Visual Studio Code:open <FILE> -a 'Visual Studio Code'
$EDITOR:$EDITOR <FILE>"

function searchFiles() {
    SEARCH_DIRECTORY=${${1}:-$HOME}
    echo $(mdfind 'kMDItemContentType != public.folder' -onlyin "$SEARCH_DIRECTORY" | fzf --exit-0 --header=Directories --preview 'cat {}')
}

function searchDirectories() {
    SEARCH_DIRECTORY=${${1}:-$HOME}
    echo $(mdfind 'kMDItemContentType == public.folder' -onlyin "$SEARCH_DIRECTORY" | fzf --exit-0 --header=Directories --preview 'cat {}')
}

function _fileActions() {
    if [ -z "$1" ]; then return; fi

    LOCAL_FILE_ACTIONS=${${2}:-$FILE_ACTIONS}
    KEY=$(echo "$LOCAL_FILE_ACTIONS" | cut -d":" -f1 | fzf --exit-0 --header="Actions on $1" --preview "cat '"$1"'")

    if [ -z "$KEY" ]; then return; fi

    ACTION=$(echo "$LOCAL_FILE_ACTIONS" | grep $KEY | cut -d":" -f2)
    eval $(echo $ACTION | sed "s/<FILE>/$1/g")
}

function _directoryActions() {
    if [ -z "$1" ]; then return; fi

    LOCAL_DIR_ACTIONS=${${2}:-$DIR_ACTIONS}
    KEY=$(echo "$LOCAL_DIR_ACTIONS" | cut -d":" -f1 | fzf --exit-0 --header="Actions on $1")
    
    if [ -z "$KEY" ]; then return; fi

    ACTION=$(echo "$LOCAL_DIR_ACTIONS" | grep $KEY | cut -d":" -f2)
    eval $(echo $ACTION | sed 's/<DIR>/$1/g')
}

function sd() {
    DIR=$(searchDirectories $1)
    _directoryActions $DIR $DIRECTORY_ACTIONS
}

function sf() {
    FILE=$(searchFiles $1)
    _fileActions $FILE $FILE_ACTIONS
}

function scd() {
    DIR=$(searchDirectories $1)
    cd $DIR
}

function sp() {
    DIR=$(find ${PROJECT_DIRECTORIES[@]} -type d -maxdepth 1 | fzf --exit-0 --header=Directories)
    _directoryActions $DIR $DIRECTORY_ACTIONS
}